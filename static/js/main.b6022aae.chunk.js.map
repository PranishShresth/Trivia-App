{"version":3,"sources":["components/Header/Header.js","pages/Form/Form.js","components/QuizCard/QuizCard.js","components/GameOver/GameOver.js","pages/Quiz/Quiz.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","root","flexGrow","backgroundColor","menuButton","marginRight","spacing","title","Header","classes","AppBar","position","className","Toolbar","variant","Typography","color","container","height","formControl","width","margin","formContainer","display","alignItems","justifyContent","Form","getQuestions","history","useHistory","useState","error","setError","questions","category","difficulty","type","formValues","setFormValues","handleChange","e","persist","prevState","target","name","value","handleSubmit","a","preventDefault","url","fetch","json","resp","results","push","Paper","elevation","onSubmit","Grid","direction","style","textAlign","padding","FormControl","TextField","id","label","onChange","InputLabel","Select","labelId","MenuItem","FormHelperText","Button","gridItem","breakpoints","up","question","fontWeight","fontSize","QuizCard","incorrect_answers","correct_answer","index","handleNext","handleAnswer","disabled","onAnswerChange","timer","answers","setValue","shuffledAnswer","setShuffledAnswer","useEffect","arr","tmp","randInd","currInd","length","Math","floor","random","shuffleAnswers","mytimer","setInterval","clearInterval","decode","str","textArea","document","createElement","innerHTML","justify","item","gutterBottom","component","Card","CardContent","RadioGroup","aria-label","event","map","ans","FormControlLabel","key","control","Radio","onClick","button","alertSuccess","border","alertDanger","background","GameOver","score","percentageScore","toFixed","xs","md","maxWidth","Quiz","setIndex","setScore","disableRadio","setDisableRadio","answer","setAnswer","gameOver","setGameOver","setTimer","CircularProgress","App","setQuestions","data","basename","exact","path","render","props","Boolean","window","location","hostname","match","ReactDOM","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.b6022aae.chunk.js","sourcesContent":["import React from \"react\";\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\n\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    flexGrow: 1,\r\n    backgroundColor: \"#735DD0\",\r\n  },\r\n  menuButton: {\r\n    marginRight: theme.spacing(2),\r\n  },\r\n  title: {\r\n    flexGrow: 1,\r\n  },\r\n}));\r\n\r\nfunction Header() {\r\n  const classes = useStyles();\r\n  return (\r\n    <AppBar position=\"static\" className={classes.root}>\r\n      <Toolbar variant=\"dense\">\r\n        <Typography variant=\"h6\" color=\"inherit\" className={classes.title}>\r\n          Trivia App\r\n        </Typography>\r\n      </Toolbar>\r\n    </AppBar>\r\n  );\r\n}\r\n\r\nexport default Header;\r\n","import React, { useState } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport InputLabel from \"@material-ui/core/InputLabel\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport Select from \"@material-ui/core/Select\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport { Typography } from \"@material-ui/core\";\r\nimport FormHelperText from \"@material-ui/core/FormHelperText\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  container: {\r\n    height: \"100%\",\r\n  },\r\n  formControl: {\r\n    width: 350,\r\n    margin: 20,\r\n  },\r\n  formContainer: {\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"center\",\r\n    height: \"100%\",\r\n  },\r\n}));\r\n\r\nfunction Form({ getQuestions }) {\r\n  const history = useHistory();\r\n  const classes = useStyles();\r\n  const [error, setError] = useState(false);\r\n  const [formValues, setFormValues] = useState({\r\n    questions: \"\",\r\n    category: \"\",\r\n    difficulty: \"\",\r\n    type: \"\",\r\n  });\r\n\r\n  const handleChange = (e) => {\r\n    e.persist();\r\n    setFormValues((prevState) => ({\r\n      ...prevState,\r\n      [e.target.name]: e.target.value,\r\n    }));\r\n  };\r\n\r\n  //handling submitting the form in controlled way\r\n  const handleSubmit = async (e) => {\r\n    //prevent reload\r\n    e.preventDefault();\r\n    if (formValues.questions === \"\") {\r\n      setError(true);\r\n      //fetch data from the api using built in fetch api\r\n      return null;\r\n    }\r\n    const url = `https://opentdb.com/api.php?amount=${formValues.questions}&category=${formValues.category}&difficulty=${formValues.difficulty}&type=${formValues.type}`;\r\n    const questions = await fetch(url);\r\n    const resp = await questions.json();\r\n    getQuestions(resp.results);\r\n    history.push(\"/trivia\");\r\n  };\r\n  return (\r\n    <div className={classes.formContainer}>\r\n      <Paper elevation={6}>\r\n        <form onSubmit={handleSubmit}>\r\n          <Grid container className={classes.container} direction=\"column\">\r\n            <Typography\r\n              variant=\"subtitle1\"\r\n              color=\"textSecondary\"\r\n              style={{\r\n                textAlign: \"center\",\r\n                backgroundColor: \"#735DD0\",\r\n                color: \"#ffffff\",\r\n                padding: \"10px\",\r\n              }}\r\n            >\r\n              Make your quiz!\r\n            </Typography>\r\n            <FormControl className={classes.formControl}>\r\n              <TextField\r\n                id=\"questions\"\r\n                name=\"questions\"\r\n                label=\"Questions*\"\r\n                onChange={handleChange}\r\n                value={formValues.questions || \"\"}\r\n              />\r\n            </FormControl>\r\n\r\n            <FormControl className={classes.formControl}>\r\n              <InputLabel id=\"categoryLabel\">Category</InputLabel>\r\n              <Select\r\n                value={formValues.category || \"\"}\r\n                onChange={handleChange}\r\n                labelId=\"categoryLabel\"\r\n                id=\"category\"\r\n                name=\"category\"\r\n              >\r\n                <MenuItem value={\"any\"}>Any Category</MenuItem>\r\n                <MenuItem value={9}>General Knowledge</MenuItem>\r\n                <MenuItem value={10}>Entertainment: Books</MenuItem>\r\n                <MenuItem value={11}>Entertainment: Film</MenuItem>\r\n                <MenuItem value={12}>Entertainment: Music</MenuItem>\r\n                <MenuItem value={13}>\r\n                  Entertainment: Musicals &amp; Theatres\r\n                </MenuItem>\r\n                <MenuItem value={14}>Entertainment: Television</MenuItem>\r\n                <MenuItem value={17}>Science &amp; Nature</MenuItem>\r\n                <MenuItem value={18}>Science: Computers</MenuItem>\r\n                <MenuItem value={19}>Science: Mathematics</MenuItem>\r\n                <MenuItem value={20}>Mythology</MenuItem>\r\n                <MenuItem value={21}>Sports</MenuItem>\r\n                <MenuItem value={22}>Geography</MenuItem>\r\n                <MenuItem value={23}>History</MenuItem>\r\n                <MenuItem value={24}>Politics</MenuItem>\r\n                <MenuItem value={25}>Art</MenuItem>\r\n                <MenuItem value={29}>Entertainment: Comics</MenuItem>\r\n                <MenuItem value={30}>Science: Gadgets</MenuItem>\r\n                <MenuItem value={31}>\r\n                  Entertainment: Japanese Anime &amp; Manga\r\n                </MenuItem>\r\n                <MenuItem value={32}>\r\n                  Entertainment: Cartoon &amp; Animations\r\n                </MenuItem>\r\n              </Select>\r\n            </FormControl>\r\n            <FormControl className={classes.formControl}>\r\n              <InputLabel id=\"difficultyLabel\">Difficulty</InputLabel>\r\n              <Select\r\n                value={formValues.difficulty || \"\"}\r\n                onChange={handleChange}\r\n                labelId=\"difficultyLabel\"\r\n                id=\"difficulty\"\r\n                name=\"difficulty\"\r\n              >\r\n                <MenuItem value=\"any\">Any Difficulty</MenuItem>\r\n                <MenuItem value={\"easy\"}>Easy</MenuItem>\r\n                <MenuItem value={\"medium\"}>Medium</MenuItem>\r\n                <MenuItem value={\"hard\"}>Hard</MenuItem>\r\n              </Select>\r\n            </FormControl>\r\n            <FormControl className={classes.formControl}>\r\n              <InputLabel id=\"typeLabel\">Type</InputLabel>\r\n              <Select\r\n                value={formValues.type || \"\"}\r\n                onChange={handleChange}\r\n                labelId=\"typeLabel\"\r\n                name=\"type\"\r\n              >\r\n                <MenuItem value=\"any\">Any Type</MenuItem>\r\n                <MenuItem value=\"multiple\">Multiple Choice</MenuItem>\r\n                <MenuItem value=\"boolean\">True / False</MenuItem>\r\n              </Select>\r\n            </FormControl>\r\n            <br />\r\n            <FormHelperText style={{ textAlign: \"center\", color: \"red\" }}>\r\n              {error\r\n                ? \"Before proceeding, please enter no of question you would like to challenge\"\r\n                : \"\"}\r\n            </FormHelperText>\r\n            <FormControl className={classes.formControl}>\r\n              <Button\r\n                type=\"submit\"\r\n                variant=\"contained\"\r\n                style={{ backgroundColor: \"#735DD0\" }}\r\n                color=\"primary\"\r\n              >\r\n                Create your Quiz\r\n              </Button>\r\n            </FormControl>\r\n          </Grid>\r\n        </form>\r\n      </Paper>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Form;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Radio from \"@material-ui/core/Radio\";\r\nimport RadioGroup from \"@material-ui/core/RadioGroup\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  // root: {\r\n  //   display: \"flex\",\r\n  //   justifyContent: \"center\",\r\n  //   alignItems: \"center\",\r\n  //   height: \"100%\",\r\n  // },\r\n  gridItem: {\r\n    [theme.breakpoints.up(\"xs\")]: {\r\n      margin: 20,\r\n    },\r\n    [theme.breakpoints.up(\"sm\")]: {\r\n      margin: 40,\r\n    },\r\n  },\r\n  root: {\r\n    width: \"80%\",\r\n    height: \"250px\",\r\n  },\r\n  question: {\r\n    fontWeight: \"1000\",\r\n    fontSize: \"20px\",\r\n    textAlign: \"center\",\r\n    [theme.breakpoints.up(\"sm\")]: {\r\n      fontSize: \"30px\",\r\n    },\r\n  },\r\n}));\r\n\r\nconst QuizCard = ({\r\n  question: { question, incorrect_answers, correct_answer },\r\n  index,\r\n  handleNext,\r\n  handleAnswer,\r\n  disabled,\r\n  onAnswerChange,\r\n  timer,\r\n}) => {\r\n  const classes = useStyles();\r\n  const answers = [...incorrect_answers, correct_answer];\r\n  const [value, setValue] = useState(\"\");\r\n  const [shuffledAnswer, setShuffledAnswer] = useState([]);\r\n\r\n  const handleRadioChange = (event) => {\r\n    setValue(event.target.value);\r\n    onAnswerChange(event.target.value);\r\n  };\r\n\r\n  useEffect(() => {\r\n    //Fisher Yates shuffle algorithm\r\n\r\n    const shuffleAnswers = (arr) => {\r\n      var currInd = arr.length;\r\n      var tmp, randInd;\r\n      while (0 != currInd) {\r\n        randInd = Math.floor(Math.random() * arr.length);\r\n        currInd--;\r\n\r\n        tmp = arr[currInd];\r\n        arr[currInd] = arr[randInd];\r\n        arr[randInd] = tmp;\r\n      }\r\n      return arr;\r\n    };\r\n\r\n    setShuffledAnswer(shuffleAnswers(answers));\r\n\r\n    var mytimer = setInterval(timer, 1000);\r\n    return () => {\r\n      clearInterval(mytimer); //after component unmounts\r\n    };\r\n  }, [question]);\r\n\r\n  const decode = (str) => {\r\n    const textArea = document.createElement(\"textarea\");\r\n    textArea.innerHTML = str;\r\n    return textArea.value;\r\n  };\r\n\r\n  return (\r\n    <Grid\r\n      container\r\n      justify=\"center\"\r\n      alignItems=\"center\"\r\n      direction=\"column\"\r\n      style={{ height: \"100%\" }}\r\n    >\r\n      <Grid item className={classes.gridItem}>\r\n        <Typography\r\n          className={classes.question}\r\n          gutterBottom\r\n          variant=\"h2\"\r\n          component=\"h2\"\r\n        >\r\n          Question {index + 1}: {decode(question)}\r\n        </Typography>\r\n      </Grid>\r\n      <Card className={classes.root}>\r\n        <CardContent>\r\n          <RadioGroup\r\n            aria-label=\"quiz\"\r\n            name=\"quiz\"\r\n            value={value}\r\n            onChange={handleRadioChange}\r\n          >\r\n            {shuffledAnswer &&\r\n              shuffledAnswer.map((ans) => {\r\n                return (\r\n                  <FormControlLabel\r\n                    key={ans}\r\n                    value={decode(ans)}\r\n                    control={<Radio disabled={disabled} />}\r\n                    label={decode(ans)}\r\n                  />\r\n                );\r\n              })}\r\n          </RadioGroup>\r\n          {!disabled ? (\r\n            <Button\r\n              variant=\"outlined\"\r\n              color=\"primary\"\r\n              className={classes.button}\r\n              onClick={() => {\r\n                handleAnswer();\r\n              }}\r\n            >\r\n              Choose\r\n            </Button>\r\n          ) : (\r\n            <Button\r\n              onClick={() => {\r\n                handleNext();\r\n              }}\r\n              variant=\"outlined\"\r\n              color=\"primary\"\r\n            >\r\n              Next\r\n            </Button>\r\n          )}\r\n        </CardContent>\r\n      </Card>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default QuizCard;\r\n","import React from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\n\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Button from \"@material-ui/core/Button\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  alertSuccess: {\r\n    border: \"1px solid rgb(214,233,198)\",\r\n    backgroundColor: \"rgb(223, 240, 216)\",\r\n    color: \"rgb(70, 136, 71)\",\r\n  },\r\n  alertDanger: {\r\n    border: \"1px solid rgb(238,211,215)\",\r\n    backgroundColor: \" rgb(242,222,222)\",\r\n    color: \"rgb(185,74,72)\",\r\n  },\r\n\r\n  container: {\r\n    width: \"80%\",\r\n    margin: \"auto\",\r\n\r\n    height: \"100%\",\r\n    textAlign: \"center\",\r\n    background: \"#ffffff\",\r\n  },\r\n}));\r\nfunction GameOver({ score, timer, question }) {\r\n  const classes = useStyles();\r\n  const history = useHistory();\r\n\r\n  let percentageScore = ((score / question) * 100).toFixed(2);\r\n  return (\r\n    <Grid\r\n      container\r\n      justify=\"center\"\r\n      alignItems=\"center\"\r\n      className={classes.container}\r\n    >\r\n      <Grid item xs={12} md={12}>\r\n        <Typography component=\"h4\" variant=\"h4\">\r\n          YOUR RESULTS\r\n        </Typography>\r\n        <Typography variant=\"subtitle1\" color=\"textSecondary\">\r\n          Your Score: {score}\r\n        </Typography>\r\n        <Typography variant=\"subtitle1\" color=\"textSecondary\">\r\n          Time Spent: {timer}s\r\n        </Typography>\r\n        <Typography variant=\"subtitle1\" color=\"textSecondary\">\r\n          Your score percentage is {percentageScore}\r\n        </Typography>\r\n        <Typography>\r\n          {percentageScore <= 30 ? (\r\n            <span className={classes.alertDanger}>\r\n              Your score is deemed: Poor\r\n            </span>\r\n          ) : percentageScore >= 30 && percentageScore <= 50 ? (\r\n            <span className={classes.alertDanger}>\r\n              Your score is deemed: Average\r\n            </span>\r\n          ) : percentageScore >= 50 && percentageScore <= 80 ? (\r\n            <span className={classes.alertSuccess}>\r\n              Your score is deemed: Good\r\n            </span>\r\n          ) : (\r\n            <span className={classes.alertSuccess}>\r\n              Your score is deemed: Excellent\r\n            </span>\r\n          )}\r\n        </Typography>\r\n        <br />\r\n        <Button\r\n          variant=\"contained\"\r\n          style={{ backgroundColor: \"#735DD0\" }}\r\n          color=\"secondary\"\r\n          onClick={() => {\r\n            history.push(\"/\");\r\n          }}\r\n        >\r\n          Play again!\r\n        </Button>\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n}\r\n\r\nexport default GameOver;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport QuizCard from \"./../../components/QuizCard/QuizCard\";\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\nimport GameOver from \"./../../components/GameOver/GameOver\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Form from \"./../Form/Form\";\r\nimport Slide from \"@material-ui/core/Slide\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    maxWidth: 600,\r\n    margin: \"auto\",\r\n  },\r\n  container: {\r\n    height: \"100%\",\r\n  },\r\n  item: {\r\n    margin: \"0 auto\",\r\n  },\r\n}));\r\n\r\nfunction Quiz({ question }) {\r\n  const classes = useStyles();\r\n  const history = useHistory();\r\n\r\n  //index of the array\r\n  const [index, setIndex] = useState(0);\r\n\r\n  //score\r\n  const [score, setScore] = useState(0);\r\n\r\n  //diasble property toggling of radio button\r\n  const [disableRadio, setDisableRadio] = useState(false);\r\n\r\n  //asnwer\r\n  const [answer, setAnswer] = useState(\"\");\r\n  const [gameOver, setGameOver] = useState(false);\r\n  const [timer, setTimer] = useState(0);\r\n\r\n  //increases the index of the array to get new question until length of array\r\n  const handleNext = () => {\r\n    if (index !== question.length - 1) {\r\n      setIndex((index) => index + 1);\r\n    } else {\r\n      setGameOver(true);\r\n    }\r\n\r\n    setDisableRadio(false);\r\n  };\r\n  const createTimer = () => {\r\n    setTimer((timer) => timer + 1);\r\n  };\r\n\r\n  const handleAnswerChange = (ans) => {\r\n    //get the answer from onchange from form\r\n    setAnswer(ans);\r\n  };\r\n  const handleAnswer = () => {\r\n    //if no answer is selected dont let the player choose\r\n    if (answer !== \"\") {\r\n      if (answer === question[index].correct_answer) {\r\n        setScore(score + 1);\r\n      }\r\n      //set the answer to empty string for next question\r\n      setAnswer(\"\");\r\n\r\n      setDisableRadio(true);\r\n    }\r\n  };\r\n\r\n  //render quiz card only if array has length more than 0\r\n  if (question.length > 0) {\r\n    return (\r\n      <>\r\n        {/* render GameOver if gameOver bool is true */}\r\n        {gameOver ? (\r\n          <GameOver score={score} timer={timer} question={question.length} />\r\n        ) : (\r\n          <>\r\n            <QuizCard\r\n              onAnswerChange={handleAnswerChange}\r\n              gameOver={gameOver}\r\n              disabled={disableRadio}\r\n              handleNext={handleNext}\r\n              handleAnswer={handleAnswer}\r\n              index={index}\r\n              question={question[index]}\r\n              timer={createTimer}\r\n            />\r\n            {/* </div> */}\r\n          </>\r\n        )}\r\n      </>\r\n    );\r\n  } else {\r\n    return (\r\n      <Grid\r\n        container\r\n        justify=\"center\"\r\n        alignItems=\"center\"\r\n        direction=\"column\"\r\n        style={{ height: \"100%\" }}\r\n      >\r\n        <CircularProgress color=\"secondary\" />\r\n        <Typography> Question not Loaded</Typography>\r\n        <Button\r\n          onClick={() => {\r\n            history.push(\"/\");\r\n          }}\r\n          color=\"secondary\"\r\n        >\r\n          Go back\r\n        </Button>\r\n      </Grid>\r\n    );\r\n  }\r\n}\r\nexport default Quiz;\r\n","import React, { useState } from \"react\";\nimport \"./App.css\";\nimport Header from \"./components/Header/Header\";\nimport Form from \"./pages/Form/Form\";\nimport Quiz from \"./pages/Quiz/Quiz\";\n\nimport { HashRouter as Router, Route, Switch } from \"react-router-dom\";\n\nfunction App() {\n  const [questions, setQuestions] = useState([]);\n\n  const getQuestions = (data) => {\n    setQuestions(data);\n  };\n\n  return (\n    <>\n      <Router basename=\"/\">\n        <Switch>\n          <div className=\"container\">\n            <Header />\n            <Route\n              exact\n              path=\"/\"\n              render={(props) => (\n                <Form {...props} getQuestions={getQuestions} />\n              )}\n            ></Route>\n            <Route\n              path=\"/trivia\"\n              render={(props) => <Quiz {...props} question={questions} />}\n            ></Route>\n          </div>\n        </Switch>\n      </Router>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}